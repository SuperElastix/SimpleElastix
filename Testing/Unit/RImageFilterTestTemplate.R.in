#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

#
# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
# Please look at RImageFilterTestTemplate.R.in to make changes.
#

#
# This is R code to test ${name}
#

library(SimpleITK)

inputs <- 1
$(if number_of_inputs then
    OUT=[[inputs <- ${number_of_inputs}]]
  end)

# arguments after --args
args <- commandArgs( TRUE )

numberOfArguments <- length(args)

if ( numberOfArguments < inputs + 2) {
    print ( "Usage: ${name} tag <input(s)> output" )
    quit( save="no", status=1 )
}

tag <- args[[1]]
# Turn this on for a slow but through testing
#gctorture()
writer <- ImageFileWriter()
filter <- ${name}()

$(if #tests == 0 then
    OUT=[[
print ( 'No tests defined!' )
quit( save="no", status=1 )
    ]]
  end)

lastargument <- args[[numberOfArguments]]

$(foreach tests
if(tag == "${tag}") {
  $(when settings
$(foreach settings
$(if parameter == "SeedList" then
    OUT=[[
      filter$$ClearSeeds()
      $(for i=1,#value do
        OUT=OUT .. "filter$$AddSeed( " .. R_value[i] .. " )\n"
       end)
    ]]
elseif R_value then
OUT=[[
    filter$$Set${parameter}( ${R_value} )
  ]]
elseif dim_vec and dim_vec==1 then
OUT=[[
    filter$$Set${parameter}( c( ]]
  for i=1,#value-1 do
    OUT=OUT..value[i]..", "
  end
  OUT=OUT..value[#value]..' ) )'
else
OUT=[[
   filter$$Set${parameter}( ${value} )
  ]]
end)
)
)

  inputs <- list()
  if (length(args) >= 3)
  {
    for ( i in 3:length(args)-1 )
    {
    inputs[[length(inputs)+1]] <- ReadImage( args[[i]] )
    }
  }

$(if inputA_cast then
 OUT="  inputs[[1]] = Cast( inputs[[1]], '${inputA_cast}' )"
end)
$(if inputB_cast then
 OUT="  inputs[[2]] = Cast( inputs[[2]], '${inputB_cast}' )"
end)

  output <- filter$$Execute ( $(if #inputs > 0 then OUT="inputs[[1]] " end)$(for inum=2,#inputs do OUT=OUT..", inputs[["..inum.."]]" end) )

$(if not no_return_image then
OUT=[[
  pixelID <- output$$GetPixelID()

  if ( pixelID == 'sitkLabelUInt8' | pixelID == 'sitkLabelUInt16' | pixelID == 'sitkLabelUInt32' | pixelID == 'sitkLabelUInt64' )
  {
  output <- LabelMapToLabel(output)
  }

  writer$$UseCompressionOn()
  writer$$SetFileName( lastargument )
  writer$$Execute( output )
]]
end)

  }
)

quit( save="no", status=0 )
