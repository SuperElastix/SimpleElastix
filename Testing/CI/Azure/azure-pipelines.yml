# These pipelines are executed on every PR, and merge. They should provide quick
# coverage for the common wrapped language and the SimpleITK core and examples.

trigger:
  - master
  - next
  - release
jobs:
  - job: Linux
    timeoutInMinutes: 0
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      PYTHONUSERBASE: $(Agent.BuildDirectory)/.pypkgs
    workspace:
      clean: all
    steps:
      - template: templates/git-download-steps.yml
      - script: |
          mkdir -p ${PYTHONUSERBASE}
          python --version
          python -m site --user-site
          python -m pip install --upgrade --user pip
          python -m pip install --user setuptools
          python -m pip install --user numpy scikit-ci-addons
          sudo apt install ninja-build
        displayName: 'Install python tools and dependency'
      - bash: |
          set -x
          c++ --version
          cmake --version
          ninja --version
          ctest -S ${BUILD_SOURCESDIRECTORY}/Testing/CI/Azure/azure.cmake -V -j 4
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_R:BOOL=OFF
            WRAP_PYTHON:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'

  - job: macOS
    timeoutInMinutes: 0
    variables:
      imageName: 'macos-10.14'
      xcodeVersion: 10.2
    pool:
      vmImage: $(imageName)

    steps:
      - template: templates/git-download-steps.yml
      - task: UsePythonVersion@0
        displayName: Enable Python
        inputs:
          versionSpec: '3.6'
          architecture: 'x64'
          addToPath: true
      - script: |
          python --version
          python -m pip install --upgrade pip
          sudo python -m pip install setuptools wheel
          sudo python -m pip install ninja scikit-ci-addons
        displayName: 'Install ninja dependency'
      - bash: |
          set -x
          xcode-select -p
          sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app/Contents/Developer/
          xcode-select -p
          c++ --version
          cmake --version
          ninja --version
          ctest -S ${BUILD_SOURCESDIRECTORY}/Testing/CI/Azure/azure.cmake -V -j 2
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_PYTHON:BOOL=ON
            WRAP_JAVA:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'

  - job: Windows
    timeoutInMinutes: 0
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      PYTHON_ARCH: x64
      CMAKE_PLATFORM: x64
      VCVAR_OPTIONS: amd64
      CTEST_CONFIGURATION_TYPE: MinSizeRel
      DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
      COREBINARYDIRECTORY: $(Build.SourcesDirectory)-build
    steps:
      - template: templates/git-download-steps.yml
      - script: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python -m pip install ninja scikit-ci-addons
        displayName: 'Install ninja dependency'
      - script: |
          cmake --version
          ctest -S "$(Build.SourcesDirectory)/Testing/CI/Azure/azure.cmake" -V -j 4
        displayName: Build and test
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
          CTEST_CMAKE_GENERATOR_TOOLSET: v141,host=x64
          CTEST_BINARY_DIRECTORY: $(coreBinaryDirectory)
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CXXFLAGS: /MP
          CFLAGS: /MP
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=OFF
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_CSHARP:BOOL=OFF
            WRAP_PYTHON:BOOL=OFF
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'
      - bash : |
          rm -rf ${COREBINARYDIRECTORY}/ITK ${COREBINARYDIRECTORY}/ITK-build ${COREBINARYDIRECTORY}/SimpleITK-build
        displayName: Cleanup build
      - script: |
          call  "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ variables.VCVAR_OPTIONS }} -vcvars_ver=14.0
          bash $(Build.SourcesDirectory)/Testing/CI/Azure/scripts/win_build_java.sh
        displayName: Build Java
      - task: UsePythonVersion@0
        displayName: Enable Python
        inputs:
          versionSpec: '3.8'
          architecture: '${{ variables.PYTHON_ARCH }}'
      - script: |
          call  "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"  ${{ variables.VCVAR_OPTIONS }} -vcvars_ver=14.0
          bash $(Build.SourcesDirectory)/Testing/CI/Azure/scripts/win_build_python.sh
        displayName: Build Python 38
