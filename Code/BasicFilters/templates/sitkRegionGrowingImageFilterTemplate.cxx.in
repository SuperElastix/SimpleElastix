/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)
$(include AddExtraIncludes.cxx.in)

namespace itk {
namespace simple {

//----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{
  this->m_SeedList = std::vector< std::vector<unsigned int> >();
$(include ConstructorInitializeMembers.cxx.in)
$(include ConstructorMemberFunctionSetup.cxx.in)

$(include ConstructorVectorPixels.cxx.in)
}

$(include DestructorDefinition.cxx.in)

//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)  out << " SeedList:" << std::endl;
  for (unsigned int i = 0; i < this->m_SeedList.size(); ++i)
    {
    out << "  " << this->m_SeedList[i] << std::endl;
    }

$(include ToStringReturn.cxx.in)
}


$(include CustomMethods.cxx.in)

//
// Execute
//$(if members and #members > 0 then
OUT = [[

Image ${name}::Execute ( const Image& image1$(if number_of_inputs==2 then OUT=', const Image& image2' end),
  const std::vector< std::vector<unsigned int> > &inSeedList$(include MemberParameters.in) )
{
$(foreach members
$(if (not no_set_method) or (no_set_method == 0) then
  OUT = '  this->Set${name} ( '..name:sub(1,1):lower()..name:sub(2,-1)..' );'
end)
)  this->SetSeedList ( inSeedList );

  return this->Execute ( image1 $(if number_of_inputs==2 then OUT=', image2' end) );
}
]]
end)
$(include ExecuteNoParameters.cxx.in)

//-----------------------------------------------------------------------------

$(include CustomCasts.cxx)

//----------------------------------------------------------------------------

$(include ExecuteInternalVectorImages.cxx.in)
//
// ExecuteInternal
//
$(include ExecuteInternalSignature.cxx.in)
{
$(include ExecuteInternalTypedefs.cxx.in)

$(include ExecuteInternalGetImagePointers.cxx.in)

$(include ExecuteInternalITKFilter.cxx.in)

$(include ExecuteInternalSetITKFilterInputs.cxx.in)
  // Convert Seed List from std::vector< std::vector<unsigned int> >
  // to std::vector<itk::Index>
  filter->ClearSeeds();
  for (unsigned int i = 0; i < m_SeedList.size(); ++i)
    {
    typedef typename InputImageType::IndexType IndexType;

    IndexType idx = sitkSTLVectorToITK< IndexType  >( m_SeedList[i] );
    filter->AddSeed(idx);
    }

$(include ExecuteInternalUpdateAndReturn.cxx.in)
}

//-----------------------------------------------------------------------------

//
// Function to run the Execute method of this filter
//
Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& imageA$(if number_of_inputs == 2 then OUT=', const Image& imageB' end),
  const std::vector< std::vector<unsigned int> > &inSeedList$(include MemberParameters.in) )
{
  ${name} filter;
  return filter.Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end), inSeedList$(for i = 1,#members do
    OUT= OUT .. ', ' .. members[i].name:sub(1,1):lower() .. members[i].name:sub(2,-1)
      end) );
}

} // end namespace simple
} // end namespace itk
