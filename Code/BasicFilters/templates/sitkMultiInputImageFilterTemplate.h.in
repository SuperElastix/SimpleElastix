/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk${name}_h
#define sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk {
  namespace simple {

   /**\class ${name}

$(if briefdescription and (briefdescription:len() > 0) then OUT=[[\brief ${briefdescription}]] end)

$(if detaileddescription and (detaileddescription:len() >0) then OUT=[[${detaileddescription}]] end)

\sa itk::simple::${name:gsub("ImageFilter$", "")} for the procedural interface
   */
    class SITKBasicFilters_EXPORT ${name}
      : public ImageFilter<3>
    {
    public:
      typedef ${name} Self;

      /** Destructor */
      virtual ~${name}();


      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      ${name}();

      /** Define the pixels types supported by this filter */
      typedef ${pixel_types}  PixelIDTypeList;

$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
$(include ClassNameAndPrint.h.in)

      /** Execute the filter on the input images */
      Image Execute ( const std::vector<Image> &images);
$(for inum=1,5 do
  OUT=OUT..[[
      Image Execute ( const Image& image1]]

  for jnum=2,inum do
    OUT=OUT .. ', const Image& image' .. jnum
  end
  OUT=OUT..[[ );
]] end)

$(if members and #members > 0 then
OUT=[[

      /** Execute the filter on the input images with the given parameters */
      Image Execute ( const std::vector<Image> &images$(include MemberParameters.in) );
]]
for inum=1,5 do
  OUT=OUT..[[
      Image Execute ( const Image& image1]]

  for jnum=2,inum do
    OUT=OUT .. ', const Image& image' .. jnum
  end
  OUT=OUT..[[$(include MemberParameters.in) );
]] end end)

$(include CustomMethods.h.in)

    private:

      /** Setup for member function dispatching */

      typedef Image (Self::*MemberFunctionType)( const std::vector<Image> & );
      template <class TImageType> Image ExecuteInternal ( const std::vector<Image> &images );

$(if vector_pixel_types_by_component then
      throw 'vector_pixel_types_by_component must not be set with multi image filters'
end)

$(include MemberFunctionDispatch.h.in)

$(include PrivateMemberDeclarations.h.in)$(include ClassEnd.h.in)


    /**
$(if briefdescription and (briefdescription:len() > 0) then
  OUT=OUT..'     * \\brief ${briefdescription}'
else
  OUT=OUT..'     * \\brief itk::simple::${name} Procedural Interface'
end)
     *
     * This function directly calls the execute method of ${name}
     * in order to support a procedural API
     *
     * \sa itk::simple::${name} for the object oriented interface
     * @{
     */
     SITKBasicFilters_EXPORT Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const std::vector<Image> &images $(include MemberParametersWithDefaults.in) );

$(for inum=1,5 do
  OUT=OUT..[[
     SITKBasicFilters_EXPORT Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& image1]]

  for jnum=2,inum do
    OUT=OUT .. ', const Image& image' .. jnum
  end
  OUT=OUT..[[$(include MemberParametersWithDefaults.in)]]

  OUT=OUT..[[ );
]]
end)
     /** @{ */

}
}
#endif
