/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk${name}_h
#define sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkImageFilter.h"
#include "sitkBasicFilters.h"

namespace itk {
  namespace simple {

$(include ClassDeclaration.h.in)
$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
      /** Set trial points. The default trial value (i.e. 0.0) is used for each index. */
      SITK_RETURN_SELF_TYPE_HEADER SetTrialPoints ( std::vector< std::vector<unsigned int> > t )
        {
        this->m_TrialPoints = t; return *this;
        }

      /** Add trial point */
      SITK_RETURN_SELF_TYPE_HEADER AddTrialPoint( std::vector<unsigned int> t )
        {
        this->m_TrialPoints.push_back( t ); return *this;
        }

      /** Clear trial points */
      SITK_RETURN_SELF_TYPE_HEADER ClearTrialPoints( )
        {
        this->m_TrialPoints.clear(); return *this;
        }

      /** Get trial points */
      std::vector< std::vector<unsigned int> > GetTrialPoints() const
        {
        return this->m_TrialPoints;
        }

$(include ClassNameAndPrint.h.in)

$(include ExecuteMethodNoParameters.h.in)$(if members and #members > 0 then
OUT=[[
      /** Execute the filter on the input image with the given parameters */
      Image Execute ( const Image&,
        std::vector< std::vector<unsigned int> > trialPoints$(include MemberParameters.in) );]]end)

$(include CustomMethods.h.in)

$(include ExecuteInternalMethod.h.in)

$(include MemberFunctionDispatch.h.in)

$(include PrivateMemberDeclarations.h.in)
      /** List of interior trail points used to initialize the fast marching */
      std::vector< std::vector<unsigned int> > m_TrialPoints;

$(include ClassEnd.h.in)

    /**
     * itk::simple::${name} Functional Interface
     *
     * This function directly calls the execute method of ${name}
     * in order to support a fully functional API
     */
    Image SITKBasicFilters_EXPORT ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& imageA,
      std::vector< std::vector<unsigned int> > trialPoints$(include MemberParametersWithDefaults.in) );

  } // end namespace simple
} // end namespace itk
#endif
