/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)
$(include AddExtraIncludes.cxx.in)

#include "sitkCreateKernel.h"

#include "itkNthElementImageAdaptor.h"
#include "itkCastImageFilter.h"
#include "itkVectorImageToImageAdaptor.h"

#include "itkFlatStructuringElement.h"

#include <iterator>

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{
  this->m_KernelRadius = std::vector<uint32_t>( 3, 1 );
  this->m_KernelType = sitkBall;
$(include ConstructorInitializeMembers.cxx.in)
$(include ConstructorMemberFunctionSetup.cxx.in)

$(include ConstructorVectorPixels.cxx.in)
}

$(include DestructorDefinition.cxx.in)

//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)
  out << "  KernelRadius: ";
  this->ToStringHelper( out, this->GetKernelRadius() );
  out << std::endl;
  out << "  KernelType: ";
  this->ToStringHelper( out, this->GetKernelType() );
  out << std::endl;

$(include ToStringReturn.cxx.in)
}

$(include CustomMethods.cxx.in)

//
// Set/Get Member Properties
//

${name}::Self& ${name}::SetKernelRadius(uint32_t r)
{
  this->m_KernelRadius.resize(3);
  std::fill( this->m_KernelRadius.begin(), this->m_KernelRadius.end(), r );
  return *this;
}
${name}::Self& ${name}::SetKernelRadius(const std::vector<uint32_t>  &r )
{
  this->m_KernelRadius = r;
  return *this;
}
std::vector<uint32_t> ${name}::GetKernelRadius() const
{
  return this->m_KernelRadius;
}
${name}::Self& ${name}::SetKernelType(KernelType t)
{
  return this->SetKernelType(KernelEnum(t));
}
${name}::Self& ${name}::SetKernelType(KernelEnum t)
{
  this->m_KernelType = t;
  return *this;
}
KernelEnum ${name}::GetKernelType() const
{
  return this->m_KernelType;
}

//
// Execute
//$(include ExecuteWithParameters.cxx.in)
$(include ExecuteNoParameters.cxx.in)

//-----------------------------------------------------------------------------

$(include CustomCasts.cxx)

//----------------------------------------------------------------------------

sitkClangDiagnosticPush();
sitkClangWarningIgnore("-Wunused-local-typedef");

//
// ExecuteInternal
//
$(include ExecuteInternalSignature.cxx.in)
{
$(include ExecuteInternalTypedefs.cxx.in)

$(include ExecuteInternalGetImagePointers.cxx.in)


  // Use correct kernel types
  typedef itk::FlatStructuringElement< InputImageType::ImageDimension > ITKKernelType;
  typedef itk::${name}<InputImageType,$(if number_of_inputs == 2 then OUT=[[ InputImageType,]] end)$(if additional_template_types then OUT=[[ $(foreach additional_template_types ${type},)]]end)$(if not no_output_type then OUT=[[ OutputImageType,]] end) ITKKernelType> FilterType;

  ITKKernelType kernel = CreateKernel<InputImageType::ImageDimension>( m_KernelType, m_KernelRadius );

  typename FilterType::Pointer filter = FilterType::New();
$(include ExecuteInternalSetITKFilterInputs.cxx.in)
  filter->SetKernel( kernel );
$(include ExecuteInternalUpdateAndReturn.cxx.in)

}

sitkClangDiagnosticPop();


//-----------------------------------------------------------------------------

//
// Function to run the Execute method of this filter
//
Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& imageA$(if number_of_inputs == 2 then OUT=', const Image& imageB' end),
                 uint32_t inRadius,  KernelEnum inKernel
                 $(when members $(foreach members , ${type} in${name})) )
{
  ${name} filter;
  return filter.SetKernelRadius( inRadius ).SetKernelType( inKernel ).Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end)$(when members $(foreach members , in${name})) );
}


//
// Function to run the Execute method of this filter
//
Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& imageA$(if number_of_inputs == 2 then OUT=', const Image& imageB' end),
                 std::vector<uint32_t> inVectorRadius,  KernelEnum inKernel
                 $(when members $(foreach members , ${type} in${name})) )
{
  ${name} filter;
  return filter.SetKernelRadius( inVectorRadius ).SetKernelType( inKernel ).Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end)$(when members $(foreach members , in${name})) );
}

} // end namespace simple
} // end namespace itk
