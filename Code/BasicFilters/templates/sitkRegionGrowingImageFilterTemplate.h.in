/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk${name}_h
#define sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkImageFilter.h"
#include "sitkBasicFilters.h"

namespace itk {
  namespace simple {

$(include ClassDeclaration.h.in)
$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
      /** Set SeedList */
      SITK_RETURN_SELF_TYPE_HEADER SetSeedList ( const std::vector< std::vector<unsigned int> > &t )
        {
        this->m_SeedList = t; return *this;
        }

      /** Get SeedList */
      std::vector< std::vector<unsigned int> > GetSeedList() const
        {
        return this->m_SeedList;
        }

      /** ClearSeeds - Clear out all seeds in the list */
      SITK_RETURN_SELF_TYPE_HEADER ClearSeeds( )
        {
        this->m_SeedList.clear();
        return *this;
        }

      /** SetSeed - Set list to a single seed */
      SITK_RETURN_SELF_TYPE_HEADER SetSeed( const std::vector<unsigned int> &idx )
        {
        this->m_SeedList.clear();
        this->m_SeedList.push_back(idx);
        return *this;
        }

      /** AddSeed - Add a seed to the end of the list */
      SITK_RETURN_SELF_TYPE_HEADER AddSeed( const std::vector<unsigned int> &idx )
        {
        this->m_SeedList.push_back(idx);
        return *this;
        }

$(include ClassNameAndPrint.h.in)

$(include ExecuteMethodNoParameters.h.in)$(if members and #members > 0 then
OUT=[[


      /** Execute the filter on the input image$(if number_of_inputs == 2 then OUT='s'end) with the given parameters */
      Image Execute ( $(include ImageParameters.in), const std::vector< std::vector<unsigned int> > &seedList$(include MemberParameters.in) );]]end)$(include CustomMethods.h.in)

$(include ExecuteInternalMethod.h.in)

$(include MemberFunctionDispatch.h.in)

$(include PrivateMemberDeclarations.h.in)
      /** List of interor seed points used to initialize the region growing segmentation */
      std::vector< std::vector<unsigned int> > m_SeedList;

$(include ClassEnd.h.in)


    /**
     * itk::simple::${name} Functional Interface
     *
     * This function directly calls the execute method of ${name}
     * in order to support a fully functional API
     */
Image SITKBasicFilters_EXPORT ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( $(include ImageParameters.in), const std::vector< std::vector<unsigned int> > &seedList$(include MemberParametersWithDefaults.in) );


  } // end namespace simple
} // end namespace itk
#endif
