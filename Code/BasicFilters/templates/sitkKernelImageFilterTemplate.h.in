/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk${name}_h
#define sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkImageFilter.h"
#include "sitkBasicFilters.h"
#include "sitkKernel.h"

namespace itk {
  namespace simple {

$(include ClassDeclaration.h.in)

    /** Kernel type enumeration */
    typedef enum{Annulus=sitkAnnulus, Ball=sitkBall, Box=sitkBox, Cross=sitkCross} KernelType;
$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
      /** Kernel radius as a scale for isotropic structures */
      SITK_RETURN_SELF_TYPE_HEADER SetKernelRadius(uint32_t r);

      /** Set/Get the radius of the kernel structuring element as a
       * vector.
       *
       * If the dimension of the image is greater then the length of
       * r, then the radius will be padded. If it is less the r will
       * be truncated.
       */
      SITK_RETURN_SELF_TYPE_HEADER SetKernelRadius(const std::vector<uint32_t>  &r );
      std::vector<uint32_t> GetKernelRadius() const;

      /** Set/Get the kernel or structuring elemenent used for the
       * morphology */
      SITK_RETURN_SELF_TYPE_HEADER SetKernelType(KernelEnum t);
#ifndef SWIG
      SITK_RETURN_SELF_TYPE_HEADER SetKernelType(KernelType t);
#endif
      KernelEnum GetKernelType() const;

$(include ClassNameAndPrint.h.in)

$(include ExecuteMethodNoParameters.h.in)$(include ExecuteMethodWithParameters.h.in)$(include CustomMethods.h.in)

$(include ExecuteInternalMethod.h.in)

$(include MemberFunctionDispatch.h.in)

$(include PrivateMemberDeclarations.h.in)
      /* Kernel Radius as a vector */
      std::vector<uint32_t> m_KernelRadius;

      /** KernelType */
      KernelEnum m_KernelType;
$(include ClassEnd.h.in)


    /**
     * itk::simple::${name} Functional Interface
     *
     * This function directly calls the execute method of ${name}
     * in order to support a fully functional API
     */
  Image SITKBasicFilters_EXPORT ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image&$(if number_of_inputs == 2 then OUT=', const Image&' end),
                                          uint32_t radius = 1, KernelEnum kernel = sitkBall
                                          $(include MemberParametersWithDefaults.in) );


   /**
     * itk::simple::${name} Functional Interface
     *
     * This function directly calls the execute method of ${name}
     * in order to support a fully functional API
     */
  Image SITKBasicFilters_EXPORT ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image&$(if number_of_inputs == 2 then OUT=', const Image&' end),
                                          const std::vector<uint32_t> vectorRadius, KernelEnum kernel = sitkBall
                                          $(include MemberParametersWithDefaults.in) );
  }
}
#endif
