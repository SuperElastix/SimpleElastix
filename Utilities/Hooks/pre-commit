#!/usr/bin/env bash
#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

egrep-q() {
  egrep "$@" >/dev/null 2>/dev/null
}

die() {
  echo 'pre-commit hook failure' 1>&2
  echo '-----------------------' 1>&2
  echo '' 1>&2
  echo "$@" 1>&2
  exit 1
}

#-----------------------------------------------------------------------------

# Check that developmer setup is up-to-date.
lastSetupForDevelopment=$(git config --get hooks.SetupForDevelopment || echo 0)
eval $(grep '^SetupForDevelopment_VERSION=' "${BASH_SOURCE%/*}/../SetupForDevelopment.sh")
test -n "$SetupForDevelopment_VERSION" || SetupForDevelopment_VERSION=0
if test $lastSetupForDevelopment -lt $SetupForDevelopment_VERSION; then
  die 'Developer setup in this work tree is out of date.  Please re-run

  Utilities/SetupForDevelopment.sh
'
fi

#-----------------------------------------------------------------------------
# Check files added by commit

added=$(git diff-index --diff-filter=A --cached HEAD --)
added_normal=$(echo "$added" | grep -v '^:...... 160000')
added_module=$(echo "$added" | grep    '^:...... 160000')

# Do not allow adding of files with .txx extension.
added_txx=$(echo "$added_normal" | grep '\.txx$')
bad=$(
  test -n "$added_txx" &&
  echo "Files with the .txx extension are deprecated -- please use .hxx instead:" &&
  echo "$added_txx" | awk '{printf("  %s\n",$6)}'
)
test -z "$bad" || die "$bad"

# Do not allow addition of submodules.
bad=$(
  test -n "$added_module" &&
  echo "Submodules may not be added to SimpleITK at this time:" &&
  echo "$added_module" | awk '{printf("  %s\n",$6)}'
)
test -z "$bad" || die "$bad"

#-----------------------------------------------------------------------------
# Style hooks.
. "${BASH_SOURCE%/*}/pre-commit-style.bash"

# Validate json files
validate_json() {
    changes=$(git diff-files -- "$1") &&
    if test -n "$changes"; then
        die "Cannot validate '$1' with work tree changes."
    fi &&
    out=$($python_exe -c "import sys, json; json.load( open( sys.argv[1], 'r' ) )" "$1" 2>&1) || die "JSON Validation error with \"$file\".
$out"
}

json_files=$(git diff-index --cached HEAD --diff-filter=AM ) &&
if test -n "$json_files"; then
    validate=$(git config --get --bool hooks.ValidateJSON || echo true) &&
    if test "$validate" = "true"; then
        python_exe=$(git config hooks.python || type -p python) &&
        if test -z "$python_exe"; then
            die 'Cannont validate SimpleITK JSON files with out Python.
Configure the Python location with:

  git config hooks.python "/path/to/python"

It is NOT recommended to disable this check with:

  git config hooks.validatejson false
'
        fi
        echo "$json_files" |
        while read src_mode dst_mode src_obj dst_obj status file; do
            if echo "$file" | egrep-q '\.json$'; then
                echo "validating $file"
                validate_json "$file"
            fi
        done
    fi
fi
