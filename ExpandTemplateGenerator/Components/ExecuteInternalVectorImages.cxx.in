$(if vector_pixel_types_by_component then
OUT=[[
//
// Dispatched methods to call ExecuteInternal on each component of the VectorImage
//
template <class TImageType> ]] if no_return_image then OUT=OUT..[[void]] else OUT=OUT..[[Image]] end OUT=OUT..[[ ${name}::ExecuteInternalVectorImage ( const Image& inImage1 )
{
  typedef TImageType                                                               VectorInputImageType;
  typedef typename VectorInputImageType::InternalPixelType                         ComponentType;
  typedef typename itk::Image<ComponentType, VectorInputImageType::ImageDimension> ComponentImageType;

  // we must define the input and output image types should be the
  // same as the scalar execute internal method
  typedef ComponentImageType  InputImageType;
]]
if output_image_type then
OUT=OUT..[[
  //Define output image type
  typedef ${output_image_type} OutputImageType;]]
elseif output_pixel_type then
OUT=OUT..[[
  // Define output image type
  typedef itk::Image< ${output_pixel_type}, InputImageType::ImageDimension > OutputImageType;]]
else
  OUT=OUT..[[
  // Define output image type
  typedef InputImageType OutputImageType;]]
end

OUT=OUT..[[

  // Get the pointer to the ITK image contained in image1
  typename VectorInputImageType::ConstPointer image1 =
    this->CastImageToITK<VectorInputImageType>( inImage1 );

  typedef itk::VectorIndexSelectionCastImageFilter< VectorInputImageType, ComponentImageType > ComponentExtratorType;
  typename ComponentExtratorType::Pointer extractor = ComponentExtratorType::New();
  extractor->SetInput( image1 );

  typedef itk::ComposeImageFilter<OutputImageType> ToVectorFilterType;
  typename ToVectorFilterType::Pointer toVector = ToVectorFilterType::New();

  unsigned int numComps = image1->GetNumberOfComponentsPerPixel();
  for ( unsigned int i = 0; i < numComps; ++i )
    {
    extractor->SetIndex( i );
    extractor->UpdateLargestPossibleRegion();

    Image tmp = this->ExecuteInternal<InputImageType>( Image( extractor->GetOutput() ) );

    typename OutputImageType::ConstPointer tempITKImage = this->CastImageToITK<OutputImageType>( tmp );

    toVector->SetInput( i, tempITKImage );
    }

  toVector->Update();

  return Image( toVector->GetOutput() );
}

//-----------------------------------------------------------------------------
]]end)
