//
// Function to run the Execute method of this filter
//
Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( $(include ImageRValueReferenceParameters.in)$(include InputRValueReferenceParameters.in)$(include MemberParameters.in) )
{
  ${name} filter;
$(for i = 1,#members do
  OUT=OUT .. [[  filter.Set]] ..members[i].name..[[( ]]
  member_name = members[i].name:sub(1,1):lower() .. members[i].name:sub(2,-1)
  if (members[i].dim_vec and (members[i].dim_vec == 1)) or
     (members[i].point_vec and (members[i].point_vec == 1)) then
    OUT = OUT..'std::move('..member_name..')'
  else
    OUT = OUT..member_name
  end
  OUT=OUT.. [[ );]]
end)
  return filter.Execute ( $(for inum=1,number_of_inputs do
                              if inum==1 then
                                OUT=OUT .. 'std::move(image1)'
                              else
                                OUT=OUT .. ', ' .. 'image' .. inum
                              end
                            end
                            if inputs then
                              for inum=1,#inputs do
                                if  not (inputs[inum].optional and no_optional) then
                                  if number_of_inputs==0 and inum==1 then
                                    OUT = OUT .. 'std::move('..inputs[inum].name:sub(1,1):lower() .. inputs[inum].name:sub(2,-1)..')'
                                  else
                                    OUT=OUT..', '..inputs[inum].name:sub(1,1):lower() .. inputs[inum].name:sub(2,-1)
                                  end
                                end
                              end
                            end) );
}
